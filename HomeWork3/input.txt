generate --depth 3 --size 400
Введение
Novosibirsk State University Testing System (NSUTs) -  это система автоматической оценки заданий по программированию, поддержка и разработка которой производится в Новосибирском государственном университете.  Данная система используется для проведения олимпиад по спортивному программированию различных уровней, а также в учебном процессе для промежуточной оценки знаний студентов ФИТ и ММФ НГУ.
Ввиду того, что NSUTs применяется для проведения таких олимпиад, как Открытая Всесибирская олимпиада по информатике и программированию имени И. В. Поттосина и для школьных и студенческих олимпиад различных уровней (в том числе и международных), то к системе предъявляются очень высокие требования. К числу важных требований относятся производительность и безопасность. Система автоматического тестирования NSUTs должна работать стабильно при высоких нагрузках, под которыми подразумевается одновременное нахождение в системе до 1000 активных пользователей. Эти данные были получены ранее. [1]
Страница очереди сданных решений, которую можно увидеть на Рисунке 1, является одним из основных компонентов системы автоматического тестирования. Участники соревнований отправляют свои решения, используя веб-интерфейс. Решение встает в очередь, где его подхватывает один их тестирующих клиентов системы. Результат тестирования сданного задания можно посмотреть, также используя веб-страницу.

Рисунок 1. Страница очереди
Высокие нагрузки на данный компонент системы появляются из-за того, что различные пользователи на этой странице видят разную информацию (большинство участников видит только свои задачи), вследствие чего кеширование данных невозможно. Также, участники часто обновляют эту страницу (часто это происходит десятки раз в минуту).
Цель данной работы заключается в том, что необходимо оптимизировать производительность веб-интерфейса системы автоматической оценки заданий по программированию. Основная идея заключается в повышении производительности системы путем пошагового внедрения клиент-серверной архитектуры. Возможность такого подхода будет продемонстрирована на примере страницы очереди сданных решений.
Первая часть работы представляет собой подробный обзор архитектуры системы, ее особенности и недостатки. Во второй части можно ознакомиться с поставленными задачами и методами их решения. В конце будет проведен анализ проделанной работы и полученного результата.
 
1	Система автоматического тестирования NSUTs
1.1 Назначение и применение
Для оценки знаний студентов и школьников по программированию предлагается решить некоторый набор задач, используя один из языков программирования, который поддерживается системой. Участник загружает свои решения в систему, используя веб-интерфейс. Решение компилируется и проходит проверку на тестах, заранее написанных автором задачи. Задачи имеют ограничения по времени исполнения и по объему занимаемой памяти. На основе результатов, полученных после тестирования сданных решений, строится рейтинг соревнования.
В системе присутствует функциональность для управления турами и задачами, тестовыми данными, информацией об участниках и их решениях, поддержка нескольких моделей проведения олимпиад, построение рейтингов участников в соответствии с этими моделями [ссылка на источник].
Важным моментом является то, что система используется для оценки знаний по программированию в учебном процессе для студентов ФИТ и ММФ, и применяется для проведения тренировок по олимпиадному программированию.


1.2 Основные понятия
Олимпиада – это одно из основных понятий системы автоматического тестирования NSUTs. Она подразумевает под собой мероприятие с определенным набором участников. В системе все события проходят под началом этого определения, так как изначально система разрабатывалась как платформа для проведения олимпиад. Поэтому, когда NSUTs используется для оценки знаний студентов в рамках учебного процесса, для этого создается отдельная олимпиада. Подобное решение используется и в других системах автоматического тестирования. В рамках каждой олимпиады может проводиться несколько туров, для которых устанавливается модель проведения и набор задач. Модель проведения тура задается правилами, установленными членами жюри (школьные правила, правила ACP/ICPC или специальные правила).
Участники соревнований регистрируются на выбранную олимпиаду, получают набор задач, а затем решают их и присылают свои решения, по результатам проверки которых выстраивается рейтинг. При построении рейтинга учитываются правила, установленными для данного тура. Соблюдения правил проведения олимпиады отслеживается членами жюри.
В системе NSUTs есть понятие команды. Под командой подразумевается группа, которая состоит не более, чем из трех участников. Один из членов команды является капитаном, он ответственный за создание команды, отправление приглашений другим участникам, корректное заполнение данных представителей созданной команды, ему также доступны функции редактирования состава и удаления команды. Функция удаления команды является особо важной ввиду того, что при самостоятельной регистрации участника на олимпиаду (не по приглашению капитана) для него автоматически создается команда, что может вызвать проблему нескольких капитанов.
1.3 Архитектура текущей системы
Система автоматического  тестирования NSUTs имеет в своем составе следующие компоненты: сервер олимпиад, тестирующие клиенты и база данных. Сервер олимпиад, который реализует основную бизнес-логику, представляется из себя веб-интерфейс, который является средством взаимодействия участников соревнований и членов жюри с системой тестирования. К задачам, решаемым на сервере, относится:
	Администрирование олимпиад и туров
	Хранение и предоставление условий задач
	Сбор и хранение тестов и решений
	Обработка и отображение результатов тестирования
	Составление рейтинга участников соревнований
	Координация работы тестирующих клиентов
	Решение задач организационного плана, таких как регистрация участников, обеспечение обратной связи с жюри и пользователями системы
Тестирующий клиент запрашивает решения участников, проверяет их на определенном наборе тестов, после чего возвращает результаты на сервер. Ввиду того, что к одному серверу может быть подключено несколько таких клиентов, то экономится время проверки решений.

Рисунок 2. Архитектура системы NSUTs
Компоненты системы, а именно сервер олимпиад и тестирующий клиенты, написаны на языке Perl. При этом часть клиента написана на языке C++ с использованием WinAPI[ссылка на источник]. Эта часть связана с изолированным запуском проверяемых программ. Веб-интерфейс реализуется при помощи таких инструментов, как JavaScript, HTML, CSS. Веб-сервер Apache с модулем mod_perl применяется для работы сервера олимпиад. Для хранения данных используется база данных MySQL, а для хранения тестов, условий, решений задействована файловая система.
В данной работе будет рассмотрен один из основных компонентов сервера олимпиад,  а именно очередь сданных  решений (также известной, как очередь сабмитов). Понятие «сабмита» было введено в системе для того, чтобы было различие между данной сущностью и схожими с ней, такими как решения, задачи. Сабмит – это объект, который создается после отправки решения участником и содержит в себе исходный код решения, а также дополнительную информацию (к какой олимпиаде, туру, задаче относится, на каком языке написно, кем и когда отправлено и т.д.).
Решение, отправленное на сервер, сразу помещается в очередь. Очередь опрашивается тестирующими клиентами, которые забирают исходный код, компилируют его и запускают на наборе тестов. Состояние элемента очереди меняется, в зависимости от этапа тестирования. В системе имеется веб-интерфейс для очереди сданных решений, чтобы участники и члены жюри могли узнавать о сотоянии сабмитов. Важно добавить, что информация, которую видят пользователи, зависит от того, какой набор прав они имеют. Таким образом, члены жюри и администраторы могут просматривать состояния всех сабмитов и изменять их состояния (например, отправлять на перетестирование). Участники олимпиад же видят только свои сабмиты.
1.4 Недостатки существующей системы
К системе тестирования NSUTs предъявляются высокие требования по производительности, функциональности, надежности. Такие требования обусловлены тем, что данная система используется для проведения олимпиад различных уровней по программированию, а все события происходят в реальном времени. Под требуемой производительностью подразумевается работа системы без сбоев и заметных замедлений (до 1000 активных пользователей).
Ранее были исследованы причины низкой производительности NSUTs [ссылка], в результате чего был сделан вывод, что архитектура системы требует значительных изменений из-за выявленых проблем:
	Большинство страниц веб-интерфейса  - динамические.
	Большая часть тела страницы – это HTML тэги, которые обеспечивают форматирование.
	Кэширование динамических страниц практически невозможно, в результате чего после любого действия пользователя системы эти страницы создаются заново.
	Некоторые проблемы взаимодействия скриптов, написанных на Perl, с веб-сервером Apache.
Проблемы, связанные с взаимодействием Apache и Perl, не позволяют использовать более продвинутый режим планирования процессов mpm_worker. Worker – это многопоточный мульти-процессорный модуль, в котором каждый запрос обрабатывается в отдельном потоке одного из процессов. Использование потоков вместо процессов позволяет более эффективно расходовать память, быстрее происходит переключение контекста.
Таким образом, наиболее логичным будет изменить систему таким образом, чтобы оформление страницы и ее содержание были разделены, обновления присылались в виде данных, а внешний вид страницы хранился в кэше. Необходимо сохранить бизнес-логику и модель данных, для написания скриптов выбрать наиболее преемлемый язык, такой чтобы были необходимые инструменты для взаимодействия с веб-сервером.
 
2  Постановка задачи
Одной из главных проблем системы проверки заданий NSUTs является низкая производительность. Это проявляется в том, что если в системе находится более 500 активных пользователей, то она перестает работать стабильно, появляются заметные замедления в работе. Такое развитие событий непреемлемо, так как на некоторых олимпиадах число участников превышает отметку 650, а популярность соревнований по программированию продолжает расти.
В 2010, когда система начинала давать сбои еще при ~150 активных пользователях, было найдено решение в виде приобретения нового сервера и увеличения числа административных лимитов серверов Apache и MySQL. Это позволило увеличить производительность, но привело к значительному росту потребления оперативной памяти. Было сделано предположение, что в дальнейшем такой метод больше невозможно использовать.
В дальнейшем, после проводения исследований, связанных с данной проблемой, был сделан выбор в пользу перехода к клиент-серверной архитектуре. Теперь создание оформления страниц веб-интерфейса будет происходить на стороне клиента, что значительно снизит нагрузки на серверную часть. А обновления будут передаваться в виде данных в формате JSON.
Для подтверждения теоретических заключений было принято решение сделать перенос приложения на новые технологии поэтапно. Страница очереди сабмитов является одним из основных компонентов системы, а по статистике и одним из самых нагруженных. Данные страницы очереди не кэшируются, так как разные пользователи видят различную информацию (участники соревнований видят только свою). Кроме того, участники очень часто (практически ежесекундно) обновляют эту часть веб-интерфеса, так как на ней отображается состояние их сабмитов. Это вызывает огромные нагрузки на систему, так как каждый раз при обновлении, заново запрашиваются все необходимые данные.
Основной задачей в рамках повышения производительности системы NSUTs является реализация и внедрение новой архитектуры для страницы очереди сабмитов с использованием новых инструментов. Необходимо подробно изучить и проанализировать существующую функциональность этого компонента системы, так как очень важно в точности воспроизвести все особенности очереди. Данная работа также будет хорошей практикой для отработки технологии миграции всего приложения на новую технологию.
В результате ожидается значительное снижение нагрузки на систему, повышение производительности и страница очереди сабмитов, реализованная на других технологиях (возможно, тут еще что-то надо дописать).
3 Переход к клиент-серверной архитектуре
3.1 Клиент-серверная архитектура
Существующая архитектура системы не позволяет решить проблемы, описанные выше. Поэтому необходимо построить приложение таким образом, чтобы можно было разделить генерирование интерфейса и получение данных. Клиент-серверная модель наиболее подходит для данной задачи.
Текущее строение системы дает возможность поэтапного перехода на клиент-серверную архитектуру, так как каждая вкладка интерфейса представляет собой отдельную веб-страницу, а страницы взаидействуют между собой не на сервере, но на клиенте. Помимо этого не требуется изменение модели данных и смены СУБД, так как исследования, проведенные под реальными нагрузками, позволили сделать вывод, что база данных не является слабым местом системы.
Как уже упоминалось ранее, одним из самых нагруженных компонентов системы является очередь сабмитов. Это связано с тем, что во время соревнований она активно используется участниками и членами жюри для отслеживания состояния отправленных сабмитов, а перезагружается пользователями от нескольких сотен до нескольких тысяч раз. Еще одной особенностью этого компонента системы являются данные, которые предоставляются участникам. Данные часто меняются, но являются разными для различных пользователей. Ввиду этих обстоятельств страница очереди была выбрана в качестве первого этапа перехода к новой архитектуре при использовании новых технологий.
3.2 Технология AJAX
В современном мире существует популярная технология, которая называется AJAX. Это расшифровывается, как Asynchronous Javascript And Xml. Если рассматривать классическую модель веб-приложения, то можно выделить следующие шаги в алгоритме работы:
	Пользователь нажимает на какой-либо элемент на веб-странице.
	Браузер формирует запрос к серверу и отправляет его.
	В качестве ответа на запрос создается абсолютно новая веб-страница, она отдается браузеру, после чего она полностью перезагружается.
При использовании технологии AJAX, алгоритм работы веб-приложения меняется следующим образом:
	Пользователь нажимает на какой-либо элемент на веб-странице.
	Скрипт, написанный на языке Javascript, определяет, какую именно информацию необходимо получить для обновления страницы.
	Браузер генерирует запрос к серверу.
	Браузер получает в качестве ответа ту часть документа, на которую был запрос.
	Скрипт вносит изменения относительно полученной информации. В результате этого страница не перезагружается полностью.
Использование такого инструмента должно заметно снизить нагрузки, подаваемые на систему, так как теперь вместо всей страницы можно обновлять только изменившуюся часть, а в нашем случае обновляться будут только данные, переданные в формате JSON (с таком случае будет более точно называть технологию AJAJ). Внешний вид страницы же будет отрисовываться на клиенте, что значительно снизит нагрузку на сервер.
3.3 Технологии серверной части
Так как серверная часть приложения теперь должна отдавать данные в формате JSON, а не HTML, то ее тоже нужно изменять. Проведенные исследования[ссылка] показали, что реализация серверной части на языке Perl не выгодна с точки зрения производительности, а также интерпретатор данного языка имеет особые проблемы с Apache 2.
Дело в том, что основной объем кода системы был написан в начале 2000-х годов. Система реализовывалась на актуальных на тот момент технологиях, одной из которых была Apache 1.x. В дальнейшем было принято решение в пользу перехода на более современную версию этого инструмента. Важным обновлением Apache стало добавление мультипроцессовых модулей. На данный момент имеется два основных модуля, которые называются worker и prefork. Появился еще один модуль, который называется event, но он только недавно перешел в категорию стабильно работающих, поэтому  не является актуальным инструментом для нашей системы.
Prefork – это классический мультипроцессовый модуль, реализующий обработку каждого потока в отдельном процессе. Он заранее создает некоторое количество процессов, которые не требуют дополнительного времени на вызов, если поступил запрос к серверу. Однако,он ограничивается некоторым числом одновременных запросов, а дальнейшее увеличение количества процессов приводит к росту потребляемой сервером памяти. Не самый производительный модуль, главным его преимуществом является безопасность, так как все процессы изолированы друг от друга, а также совместимость со старыми библиотеками, которые не поддерживают потоки.
Worker – это мультипроцессовый модуль, использующий многопоточную систему обработки запросов. Он запускает несколько процессов, которые запускают несколько потоков. Этот модуль хорош тем, что может обрабатывать большое количество одновременных запросов, помимо этого он потребляет меньшее количество памяти сервера. С другой стороны, он менее стабильный, чем prefork, ввиду чего снижается уровень безопасности.
Из всего вышесказанного можно сделать вывод, что для нашей системы необходимо использовать мультипроцессовый модуль worker. Это обусловлено тем, что он менее ресурсоемкий и поддерживает большое количество соединений. Но как уж было сказано выше, система была написана в начале 2000-х годов при использовании соответствующих технологий. Так, для работы с базой данных была выбрана библиотека Apache::DBI, которая имеет проблемы при работе с многопоточной версией Apache. Таким образом, использование mpm_worker вызовет другие трудности в работе системы.
Если говорить о современных технологиях, то необходимо отметить, что высокую популярность набирает использование связок Apache2 + mod_php и Nginx + php-FastCGI.
Рассматривая первую связку, стоит подробней рассказать, что такое mod_php. Mod_php – это модуль, разработанный для Apache и позволяющий последнему исполнять php-скрипты. Этот модуль подгружается во все процессы сервера, в результате чего создается дополнительная нагрузка на сайт, которая не приносит пользу. Стоит отметить, что связка Apache2 + mod_php подходит только для слабонагруженных сайтов. Основными преимуществами данного модуля являются быстрое исполнение скриптов и возможность кэширования, что в свою очередь поднимает производительность. Но в то же самое время, необходимо обратить внимание на недостатки:
1.	Если какой-либо скрипт имеет ошибки, он может привести к сбою в работе веб-сервера.
2.	Нельзя стандартными средствами узнать какой пользователь запустил приложение.
3.	Есть определенные проблемы совместимости с многопоточной версией веб-сервера Apache 2.
FastCGI – это высокопроизводительный интерфейс, предназначенный для взаимодействия приложения с веб-сервером. Основным преимуществом его является то, что FastCGI может быть запущен от имени пользователя, которое отлично от пользователя веб-сервера. Это обеспечивает дополнительную безопасность. В отличии от CGI, этот интерфейс не создает новые процессы для каждого нового запроса, а использует постоянно запущенные процессы для обработки запросов. Дополнительным преимуществом является внутренний распределитель нагрузки.
В настоящее время активно используется альтернативная реализация FastCGI с дополнительными возможностями, которая называется FPM (менеджер процессов FastCGI). Данный менеджер часто используется для высоконагруженных сайтов. К его основным особенностям относятся:
1.	Продвинутое управление процессами.
2.	Поддержка ускоренной загрузки.
3.	Статическое/динамическое управление дочерними процессами.
4.	Логирование стандартных потоков.
5.	Возможность перезапуска интерпретатора без потери запросов.
Таким образом, из всего вышеперечисленного явно следует вывод, что серверную часть логично переделать, используя язык программирования PHP. Это даст множество новых возможностей для повышения производительности и повышения уровня безопасности.
3.4	Технологии клиентской части
При выборе технологий для клиентской части встал вопрос, что выбрать: чистый JavaScript или готовый фреймворк. А если выбирать фреймворк, то какой?
Ранее в рамках исследований были попытки реализации клиентской части на чистом JavaScript. В результате проделанной работы мы убедились, что это вполне реально, но есть особые пункты, которые достаточно сложны в реализации при учете, что вся разработка ведется только силами студентов. Это касается вопроса безопасности.
Проблема состоит в том, что есть большая вероятность, что пользователь введет в систему такие данные, которые будут интерпретироваться как JavaScript или HTML. Это возможно, например, при регистрации команды участником. В этом случае, если участник пишет в названии команды строку <img src = “https://name.of.his.site.ru/img.gif”>, то другие люди будут видеть картинку, путь к которой указан вместо текстового названия команды. Называется это XSS (Cross-Site Scripting). В данном случае выглядит все безобидно, но вместо этой строки может быть написана какая-то другая, менее приятная, вплоть до получения данных о других участниках и исполнения скриптов от имени администратора.
Как уже было сказано ранее, разработка ведется силами студентов, а обработка всех узких мест может занять много времени. В результате этого выбор был сделан в пользу использования готового фреймворка. Но здесь все тоже непросто.
	Важным фактором в выборе какого-либо фреймворка была компания, которая его разрабатывает. Это объясняется тем, что прекращение поддержки фреймворка крайне нежелательно для нашего проекта, так как придется заново заниматься поисками подходящего инструмента, а также тратить время на переписывание кода. Помимо того, что переписывание кода достаточно затратно по времени и в какой-то мере бессмысленно, оно еще и проблематично, так как люди, работающие над системой, постоянно меняются, что может быть причиной того, что потребуется дополнительные силы и время на реализацию компонентов системы.
По перечисленным выше причинам были выдвинуты на рассмотрение два фреймворка: AngularJS и ReactJS. Разработка первого ведется компанией Google, а второго компанией Facebook. В то время, когда необходимо было сделать окончательный выбор, компания Google анонсировала выход новой версии AngularJS, которая была плохо совместима с первой. В результате этого мы решили реализовывать клиентскую часть при помощи ReactJS.
 
4 Разработка





 
Заключение
Целью данной работы была оптимизация работы системы автоматической оценки знаний NSUTs путем повышения такого параметра, как производительность. Идея работы заключалась в том, чтобы реализовать клиент-серверную архитектуру на стеке технологии AJAX/AJAJ для одного из самых нагруженных элементов системы – страницы очереди сабмитов.
В результате работы была реализована новая страница очереди решений с полным сохранением функциональности и внешнего вида с использованием технологии AJAX. Появилось кэширование страницы, разделено получение данных и отрисовка внешнего вида. Данные передаются сервером в формате JSON, инетерфейс генерируется на стороне клиента. Реализована собственная оболочка для работы с базой данных. Отработана техника поэтапной миграции приложения.
Начата работа по получению численных результатов работы. Планируется провести анализ того, насколько повысилась произвдительность системы после того, как в систему была внедрена новая страница очереди.
С февраля 2017 года данный компонент системы введен в опытную эксплуатацию и активно используется для проведения олимпиад и в учебном процессе НГУ.
